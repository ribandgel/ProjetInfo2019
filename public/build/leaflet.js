(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["leaflet"],{

/***/ "./assets/js/leaflet.js":
/*!******************************!*\
  !*** ./assets/js/leaflet.js ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! core-js/modules/es.array.map */ "./node_modules/core-js/modules/es.array.map.js");

__webpack_require__(/*! core-js/modules/es.function.name */ "./node_modules/core-js/modules/es.function.name.js");

__webpack_require__(/*! core-js/modules/es.string.trim */ "./node_modules/core-js/modules/es.string.trim.js");

var L = __webpack_require__(/*! leaflet */ "./node_modules/leaflet/dist/leaflet-src.js");

var $ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js"); //this fixes a leaflet bug that does not import the marker images if we don't add those lines


delete L.Icon.Default.prototype._getIconUrl;
L.Icon.Default.mergeOptions({
  iconRetinaUrl: __webpack_require__(/*! leaflet/dist/images/marker-icon-2x.png */ "./node_modules/leaflet/dist/images/marker-icon-2x.png"),
  iconUrl: __webpack_require__(/*! leaflet/dist/images/marker-icon.png */ "./node_modules/leaflet/dist/images/marker-icon.png"),
  shadowUrl: __webpack_require__(/*! leaflet/dist/images/marker-shadow.png */ "./node_modules/leaflet/dist/images/marker-shadow.png")
});
var producers = [];
var producer = {};
var mymap;
var layerGroup;
var marker;
var bigmapheight = 600;
var smallmapheight = 300;
var mapbreakwidth = 720;
var highzoom = 6;
var lowzoom = 4;
var initzoom;
$(document).ready(function () {
  $.get("http://127.0.0.1:8000/api/producers", function (data) {
    for (var i = 0; i < data.length; i++) {
      var obj = data[i];
      var _producer = {
        name: obj.name,
        lat: obj.latitude,
        "long": obj.longitude,
        website: obj.website
      };
      producers.push(_producer);
    }

    if ($("#mapid").width() > mapbreakwidth) {
      initzoom = highzoom;
      $("#mapid").height(bigmapheight);
    } else {
      initzoom = lowzoom;
      $("#mapid").height(smallmapheight);
    }

    ;
    mymap = L.map('mapid', {
      minZoom: 5,
      maxZoom: 8
    }).setView([46.227638, 2.213749], initzoom);
    L.tileLayer('https://maps.heigit.org/openmapsurfer/tiles/roads/webmercator/{z}/{x}/{y}.png', {
      maxZoom: 19,
      attribution: 'Imagery from <a href="http://giscience.uni-hd.de/">GIScience Research Group @ University of Heidelberg</a> | Map data &copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
    }).addTo(mymap);
    layerGroup = L.layerGroup().addTo(mymap);

    for (var _i = 0; _i < producers.length; _i++) {
      marker = L.marker([producers[_i].lat, producers[_i]["long"]]).addTo(layerGroup);

      if (producers[_i].website != "") {
        marker.bindPopup("<a target=\"_blank\" href=" + producers[_i].website + "><b>Domaine</b><br>" + producers[_i].name + "</a>");
      } else {
        marker.bindPopup("<b>Domaine</b><br>" + producers[_i].name);
      }
    }
  }); // listen for screen resize events and changes map size and zoom accordingly

  window.addEventListener('resize', function (event) {
    if ($("#mapid").width() > mapbreakwidth) {
      initzoom = highzoom;
      $("#mapid").height(bigmapheight);
      mymap.setView([46.227638, 2.213749], initzoom);
    } else {
      initzoom = lowzoom;
      $("#mapid").height(smallmapheight);
      mymap.setView([46.227638, 2.213749], initzoom);
    }

    ;
  });
  var searchDiv = document.getElementById("search");
  searchDiv.style.display = "none";
  var searchOpt = document.getElementById("searchOpt");
  searchOpt.addEventListener("click", function () {
    searchDiv.hidden = false;
  });
  var dropDwnContent = document.getElementById("dropdown-content");
  searchOpt.addEventListener("click", function () {
    searchDiv.style.display = "inline";
    searchOpt.style.display = "none";
    dropDwnContent.style.display = "none";
  });
  /*----------------------------STUFFS TO FILTER SEARCH ON MAP-------------------------------*/

  var searchBt = document.getElementById("searchBt"); //le boutton rechercher

  var radioOpt = document.getElementsByName('searchOption'); //le radio bt chosen by user to filter by

  var resNotDFound = document.getElementById('notFound');
  /*....controls the placeholder of the search bar when picking different filtering options from the radio buttons ....*/

  var prev = null;

  for (var i = 0; i < radioOpt.length; i++) {
    radioOpt[i].addEventListener('change', function () {
      //(prev) ? console.log(prev.value): null;
      if (this !== prev) {
        prev = this;
      }

      for (var _i2 = 0, length = radioOpt.length; _i2 < length; _i2++) {
        if (radioOpt[_i2].checked) {
          //console.log("radio checked = " + radioOpt[i].value);
          if (radioOpt[_i2].value === "appellation") {
            document.getElementById("searchQuery").placeholder = 'Entrez un nom d\'appellation';
          }

          if (radioOpt[_i2].value === "couleur") {
            document.getElementById("searchQuery").placeholder = 'Entrez une couleur';
          }

          if (radioOpt[_i2].value === "cepage") {
            document.getElementById("searchQuery").placeholder = 'Entrez un nom de cépage';
          }
        } //console.log(this.value)

      }
    });
  }
  /*.............................................................................................................*/


  searchBt.addEventListener("click", function () {
    layerGroup.clearLayers();
    var ps = [];
    var p = {};
    var search = document.getElementById("searchQuery").value; //ce qu'a ecrit l'utilisateur dans la barre de recherche

    var _loop = function _loop(_i3) {
      if (radioOpt[_i3].checked) {
        $.get("http://127.0.0.1:8000/api/wines", function (data) {
          if (radioOpt[_i3].value === "appellation") {
            for (var _i4 = 0; _i4 < data.length; _i4++) {
              var obj = data[_i4];
              console.log("DATA[i] = " + data[_i4]);
              var name = obj.designation.name;

              if (search.toLowerCase().trim() == name.toLowerCase().trim()) {
                p.name = obj.producer.name; //console.log("name found = " + p.name);

                p.lat = obj.producer.latitude; //console.log("name found = " + p.lat);

                p["long"] = obj.producer.longitude; //console.log("name found = " + p.long);

                ps.push(p);

                for (var _i5 = 0; _i5 < ps.length; _i5++) {
                  marker = L.marker([ps[_i5].lat, ps[_i5]["long"]]).addTo(layerGroup);
                  marker.bindPopup("<a href='/info_winery'><b>Domaine</b><br>" + ps[_i5].name + "</a>");
                }
              }
            }

            if (ps.length == 0) {
              resNotDFound.innerText = "Pas de résultats.";
            }
          }

          if (radioOpt[_i3].value === "couleur") {
            for (var _i6 = 0; _i6 < data.length; _i6++) {
              var _obj = data[_i6];
              var color = _obj.color.color; //console.log("COLOR = " + color);

              if (search.toLowerCase().trim() == color.toLowerCase().trim()) {
                p.name = _obj.producer.name; //console.log("name found = " + p.name);

                p.lat = _obj.producer.latitude; //console.log("name found = " + p.lat);

                p["long"] = _obj.producer.longitude; //console.log("name found = " + p.long);

                ps.push(p);

                for (var _i7 = 0; _i7 < ps.length; _i7++) {
                  marker = L.marker([ps[_i7].lat, ps[_i7]["long"]]).addTo(layerGroup);
                  marker.bindPopup("<a href='/info_winery'><b>Domaine</b><br>" + ps[_i7].name + "</a>");
                }
              }
            }
          }

          if (radioOpt[_i3].value === "cepage") {
            for (var _i8 = 0; _i8 < data.length; _i8++) {
              var _obj2 = data[_i8];
              var variety = _obj2.variety.name;

              if (search.toLowerCase().trim() == variety.toLowerCase().trim()) {
                p.name = _obj2.producer.name; //console.log("name found = " + p.name);

                p.lat = _obj2.producer.latitude; //console.log("name found = " + p.lat);

                p["long"] = _obj2.producer.longitude; //console.log("name found = " + p.long);

                ps.push(p);

                for (var _i9 = 0; _i9 < ps.length; _i9++) {
                  marker = L.marker([ps[_i9].lat, ps[_i9]["long"]]).addTo(layerGroup);
                  marker.bindPopup("<a href='/info_winery'><b>Domaine</b><br>" + ps[_i9].name + "</a>");
                }
              }
            }
          }
        });
      }
    };

    for (var _i3 = 0; _i3 < radioOpt.length; _i3++) {
      _loop(_i3);
    }
  });
}); // The Leaflet L.Map class provides the fitBounds method to zoom a map to contain a rectangular bounding box.
// The L.latLngBounds utility function creates a bounding box object from an array of latitude and longitude coordinates.
// With a single marker, however, we only have one latitude and longitude coordinate from which to create the bounding box.
// The solution is to create a single-element array containing the latitude and longitude coordinate of the marker.
// The following function centers and zooms a leaflet map on a single marker. Line 2 creates the single-element array containing
// the latitude and longitude coordinate of the marker. Line 3 creates the bounding box that encloses the marker’s location. Finally,
// line 4 zooms the map to enclose the bounding box.
// function centerLeafletMapOnMarker(map, marker) {
//     var latLngs = [ marker.getLatLng() ];
//     var markerBounds = L.latLngBounds(latLngs);
//     map.fitBounds(markerBounds);
// }

/***/ })

},[["./assets/js/leaflet.js","runtime","vendors~leaflet"]]]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,